/* Generated By:JavaCC: Do not edit this line. TextQLParserTokenManager.java */
package edu.uci.ics.textdb.textql.languageparser;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

/** Token Manager. */
public class TextQLParserTokenManager implements TextQLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 40:
         return jjStopAtPos(0, 25);
      case 41:
         return jjStopAtPos(0, 26);
      case 42:
         return jjStopAtPos(0, 34);
      case 44:
         return jjStopAtPos(0, 32);
      case 46:
         return jjStartNfaWithStates_0(0, 33, 5);
      case 59:
         return jjStopAtPos(0, 31);
      case 60:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 61:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 62:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1300000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x94000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x400100L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 91:
         return jjStopAtPos(0, 29);
      case 93:
         return jjStopAtPos(0, 30);
      case 123:
         return jjStopAtPos(0, 27);
      case 125:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000200L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2180L);
      case 78:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L);
      case 79:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x840L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x40140L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x280400L);
      case 89:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x100200L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 77:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         break;
      case 78:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(3, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 79:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x40400L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 87:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(3, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         return jjMoveStringLiteralDfa5_0(active0, 0x404000L);
      case 71:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         break;
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 69:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         break;
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 83:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         break;
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 84:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 89:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(9, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 72:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(11, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(1, 4);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 46)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 8:
                  jjCheckNAddStates(3, 5);
                  break;
               case 9:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 10:
                  if (curChar == 34 && kind > 43)
                     kind = 43;
                  break;
               case 11:
                  if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 47 && kind > 44)
                     kind = 44;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 17:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(17);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
               case 9:
                  jjCheckNAddStates(3, 5);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
               case 14:
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 13:
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 14, 15, 7, 9, 10, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\103\122\105\101\124\105", 
"\104\111\103\124\111\117\116\101\122\131", "\126\111\105\127", "\123\105\114\105\103\124", 
"\105\130\124\122\101\103\124", "\106\122\117\115", "\101\123", "\114\111\115\111\124", 
"\117\106\106\123\105\124", "\125\123\111\116\107", "\117\116", "\112\117\111\116", 
"\127\110\105\122\105", "\117\125\124\120\125\124", "\111\116\123\105\122\124", "\111\116\124\117", 
"\126\101\114\125\105\123", "\124\117", "\111\104", "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\52", "\75", "\74", "\76", "\75\75", "\74\75", "\76\75", "\41\75", 
null, null, null, null, "\113\105\131\127\117\122\104\115\101\124\103\110", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[18];
private final int[] jjstateSet = new int[36];
protected char curChar;
/** Constructor. */
public TextQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TextQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 18; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
