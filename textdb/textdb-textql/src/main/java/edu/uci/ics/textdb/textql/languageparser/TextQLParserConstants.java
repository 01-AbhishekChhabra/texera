/* Generated By:JavaCC: Do not edit this line. TextQLParserConstants.java */
package edu.uci.ics.textdb.textql.languageparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TextQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CREATE = 6;
  /** RegularExpression Id. */
  int DICTIONARY = 7;
  /** RegularExpression Id. */
  int VIEW = 8;
  /** RegularExpression Id. */
  int SELECT = 9;
  /** RegularExpression Id. */
  int EXTRACT = 10;
  /** RegularExpression Id. */
  int FROM = 11;
  /** RegularExpression Id. */
  int AS = 12;
  /** RegularExpression Id. */
  int LIMIT = 13;
  /** RegularExpression Id. */
  int OFFSET = 14;
  /** RegularExpression Id. */
  int USING = 15;
  /** RegularExpression Id. */
  int ON = 16;
  /** RegularExpression Id. */
  int JOIN = 17;
  /** RegularExpression Id. */
  int WHERE = 18;
  /** RegularExpression Id. */
  int OUTPUT = 19;
  /** RegularExpression Id. */
  int INSERT = 20;
  /** RegularExpression Id. */
  int INTO = 21;
  /** RegularExpression Id. */
  int VALUES = 22;
  /** RegularExpression Id. */
  int TO = 23;
  /** RegularExpression Id. */
  int ID = 24;
  /** RegularExpression Id. */
  int LPAREN = 25;
  /** RegularExpression Id. */
  int RPAREN = 26;
  /** RegularExpression Id. */
  int LBRACE = 27;
  /** RegularExpression Id. */
  int RBRACE = 28;
  /** RegularExpression Id. */
  int LBRACKET = 29;
  /** RegularExpression Id. */
  int RBRACKET = 30;
  /** RegularExpression Id. */
  int SEMICOLON = 31;
  /** RegularExpression Id. */
  int COMMA = 32;
  /** RegularExpression Id. */
  int DOT = 33;
  /** RegularExpression Id. */
  int STAR = 34;
  /** RegularExpression Id. */
  int ASSIGN = 35;
  /** RegularExpression Id. */
  int LT = 36;
  /** RegularExpression Id. */
  int GT = 37;
  /** RegularExpression Id. */
  int EQ = 38;
  /** RegularExpression Id. */
  int LE = 39;
  /** RegularExpression Id. */
  int GE = 40;
  /** RegularExpression Id. */
  int NE = 41;
  /** RegularExpression Id. */
  int NUMBER_LITERAL = 42;
  /** RegularExpression Id. */
  int STRING_LITERAL = 43;
  /** RegularExpression Id. */
  int REGEX_LITERAL = 44;
  /** RegularExpression Id. */
  int IDENTIFIER = 45;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\f\"",
    "\"CREATE\"",
    "\"DICTIONARY\"",
    "\"VIEW\"",
    "\"SELECT\"",
    "\"EXTRACT\"",
    "\"FROM\"",
    "\"AS\"",
    "\"LIMIT\"",
    "\"OFFSET\"",
    "\"USING\"",
    "\"ON\"",
    "\"JOIN\"",
    "\"WHERE\"",
    "\"OUTPUT\"",
    "\"INSERT\"",
    "\"INTO\"",
    "\"VALUES\"",
    "\"TO\"",
    "\"ID\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"*\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "<NUMBER_LITERAL>",
    "<STRING_LITERAL>",
    "<REGEX_LITERAL>",
    "<IDENTIFIER>",
    "\"KEYWORDMATCH\"",
  };

}
