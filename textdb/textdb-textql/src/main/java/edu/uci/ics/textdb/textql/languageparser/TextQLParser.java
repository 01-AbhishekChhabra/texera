/* Generated By:JavaCC: Do not edit this line. TextQLParser.java */
package edu.uci.ics.textdb.textql.languageparser;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

public class TextQLParser implements TextQLParserConstants {

    private int _lid = 0;
    private String getNewUniqueId(){
        return "__lid" + Integer.toString(_lid++, 36);
    }

/*
 *	Wrappers for Literal Tokens
 */
  final public double numberDouble() throws ParseException {
    String numberString;
    numberString = numberLiteral();
                                     {if (true) return Double.parseDouble(numberString);}
    throw new Error("Missing return statement in function");
  }

  final public int numberInteger() throws ParseException {
    String numberString;
    numberString = numberLiteral();
                                     {if (true) return Integer.parseInt(numberString);}
    throw new Error("Missing return statement in function");
  }

  final public String numberLiteral() throws ParseException {
    Token token;
    token = jj_consume_token(NUMBER_LITERAL);
                               {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public String regexLiteral() throws ParseException {
    Token token;
    token = jj_consume_token(REGEX_LITERAL);
                              {if (true) return token.image.substring(1, token.image.length()-1).replace("\u005c\u005c/", "/");}
    throw new Error("Missing return statement in function");
  }

  final public String stringLiteral() throws ParseException {
    Token token;
    token = jj_consume_token(STRING_LITERAL);
                               {if (true) return token.image.substring(1, token.image.length()-1).replace("\u005c\u005c\u005c"", "\u005c"");}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
    Token token;
    token = jj_consume_token(IDENTIFIER);
                           {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/*
 *	List of (some) Literal Tokens separated by comma
 */
  final public List<String> identifierList() throws ParseException {
    String identif;
    List<String> identifiers = new ArrayList<String>();
    identif = identifier();
                           identifiers.add(identif);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      identif = identifier();
                                     identifiers.add(identif);
    }
      {if (true) return identifiers;}
    throw new Error("Missing return statement in function");
  }

/*
 *	Statements Declaration
 */
  final public List<Map<String, Object>> statementsMain(Consumer<Map<String,Object>> statementConsumer) throws ParseException {
    List<Map<String, Object>> statements = new ArrayList();
    Map<String, Object> newStatement;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
      case SELECT:
      case EXTRACT:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      newStatement = statement();
                                     statements.add(newStatement);
          if(statementConsumer!=null)statementConsumer.accept(newStatement);
    }
    jj_consume_token(0);
      {if (true) return statements;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> statement() throws ParseException {
    Map<String, Object> newStatement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case EXTRACT:
      newStatement = selectStatement();
      break;
    case CREATE:
      newStatement = createViewStatement();
      break;
    default:
      jj_la1[2] = jj_gen;
      newStatement = emptyStatement();
    }
    jj_consume_token(SEMICOLON);
      {if (true) return newStatement;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> selectStatement() throws ParseException {
    HashMap<String, Object> statementParameters = new HashMap<String, Object>() {{
        put("statementType", "select");
        put("statementName", getNewUniqueId());
        put("projectAll", null);
        put("projectFields", null);
        put("extractCommand", null);
        put("from", null);
        put("limit", null);
        put("offset", null);
    }};

    List<String> projectFields;
    Map<String,Object> extractCmd;
    String identifier;
    String from;
    Integer limit;
    Integer offset;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                             statementParameters.put("projectAll", true);
        break;
      case IDENTIFIER:
                      projectFields = new ArrayList<String>();
        identifier = identifier();
                                                projectFields.add(identifier);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          identifier = identifier();
                                                        projectFields.add(identifier);
        }
                      statementParameters.put("projectFields", projectFields);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTRACT:
        jj_consume_token(EXTRACT);
        extractCmd = extractCommand();
                                                      statementParameters.put("extractCommand", extractCmd);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    case EXTRACT:
      jj_consume_token(EXTRACT);
      extractCmd = extractCommand();
                                                    statementParameters.put("extractCommand", extractCmd);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FROM);
    from = identifier();
                               statementParameters.put("from", from);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      jj_consume_token(LIMIT);
      limit = numberInteger();
                                      statementParameters.put("limit", limit);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OFFSET:
      jj_consume_token(OFFSET);
      offset = numberInteger();
                                        statementParameters.put("offset", offset);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      {if (true) return statementParameters;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> createViewStatement() throws ParseException {
    HashMap<String, Object> statementParameters = new HashMap<String, Object>() {{
        put("statementType", "view");
        put("statementName", null);
        put("substatement", null);
    }};
    String viewName;
    Map<String, Object> substatement;
    jj_consume_token(CREATE);
    jj_consume_token(VIEW);
    viewName = identifier();
                            statementParameters.put("statementName", viewName);
    jj_consume_token(AS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case EXTRACT:
      substatement = selectStatement();
      break;
    case CREATE:
      substatement = createViewStatement();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        statementParameters.put("substatement", substatement);
      {if (true) return statementParameters;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> emptyStatement() throws ParseException {
    HashMap<String, Object> statementParameters = new HashMap<String, Object>() {{
        put("statementType", "empty");
        put("statementName", getNewUniqueId());
    }};
      {if (true) return statementParameters;}
    throw new Error("Missing return statement in function");
  }

/*
 *	Extract Commands Declaration
 */
  final public Map<String, Object> extractCommand() throws ParseException {
    Map<String, Object> extractParameters = new HashMap<String, Object>() {{
        put("extractType", null);
    }};
    extractParameters = extractKeywordMatchCommand();
      {if (true) return extractParameters;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String, Object> extractKeywordMatchCommand() throws ParseException {
    HashMap<String, Object> extractParameters = new HashMap<String, Object>() {{
        put("extractType", null);
        put("matchFields", null);
        put("keyword", null);
        put("matchType", null);
    }};
    List<String> matchFields;
    String matchField;
    String keyword;
    String matchType;
    jj_consume_token(46);
                     extractParameters.put("extractType", "keyword");
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      matchField = identifier();
                                          matchFields = Arrays.asList(matchField);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      matchFields = identifierList();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            extractParameters.put("matchFields", matchFields);
    jj_consume_token(COMMA);
    keyword = stringLiteral();
                                          extractParameters.put("keyword", keyword);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      matchType = identifier();
                                          extractParameters.put("matchType", matchType);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
      {if (true) return extractParameters;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TextQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80000640,0x640,0x0,0x0,0x400,0x600,0x2000,0x4000,0x640,0x20000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x0,0x0,0x1,0x2004,0x0,0x0,0x0,0x0,0x0,0x2000,0x1,};
   }

  /** Constructor with InputStream. */
  public TextQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TextQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TextQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TextQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TextQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TextQLParser(TextQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TextQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
