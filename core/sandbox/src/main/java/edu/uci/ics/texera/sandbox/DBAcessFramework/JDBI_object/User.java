package edu.uci.ics.texera.sandbox.DBAcessFramework.JDBI_object;

import java.util.Objects;

/**
 * A data class holds relevant pieces of data together in a single class.
 * The "data" class is also commonly referred as "Bean" class or "POJO" class (they mean the same thing).
 *
 * The purpose of such a data class is that it can conveniently:
 *   - map to a table row (by JDBI)for database communication and then map back to Java Object
 *   - map to a JSON string (by Jackson) for frontend communication and then map back to Java Object
 *
 * A data class typically only contains:
 *   - private fields
 *   - an empty constructor and a normal constructor
 *   - getters and setters (can be automatically generated by IDE, IntelliJ/Eclipse)
 *   - equals, hashcode, toString (can also be automatically generated by IDE)
 *   - possibly some annotations of the mapping framework
 *
 * @author Zuozhi Wang
 * Created at 10/21/2018
 */
public class User {

    private String id;
    private String username;

    public User() { }

    public User(String userID, String username) {
        this.id = userID;
        this.username = username;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(id, user.id) &&
                Objects.equals(username, user.username);
    }

    @Override
    public int hashCode() {

        return Objects.hash(id, username);
    }

    @Override
    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", username='" + username + '\'' +
                '}';
    }
}
