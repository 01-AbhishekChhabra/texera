/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.web.resource.metadata.tables;


import edu.uci.ics.texera.web.resource.metadata.Indexes;
import edu.uci.ics.texera.web.resource.metadata.Keys;
import edu.uci.ics.texera.web.resource.metadata.Metadata;
import edu.uci.ics.texera.web.resource.metadata.tables.records.DictionaryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dictionary extends TableImpl<DictionaryRecord> {

    private static final long serialVersionUID = 1781680794;

    /**
     * The reference instance of <code>metadata.Dictionary</code>
     */
    public static final Dictionary DICTIONARY = new Dictionary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictionaryRecord> getRecordType() {
        return DictionaryRecord.class;
    }

    /**
     * The column <code>metadata.Dictionary.id</code>.
     */
    public final TableField<DictionaryRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>metadata.Dictionary.name</code>.
     */
    public final TableField<DictionaryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>metadata.Dictionary.content</code>.
     */
    public final TableField<DictionaryRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>metadata.Dictionary</code> table reference
     */
    public Dictionary() {
        this(DSL.name("Dictionary"), null);
    }

    /**
     * Create an aliased <code>metadata.Dictionary</code> table reference
     */
    public Dictionary(String alias) {
        this(DSL.name(alias), DICTIONARY);
    }

    /**
     * Create an aliased <code>metadata.Dictionary</code> table reference
     */
    public Dictionary(Name alias) {
        this(alias, DICTIONARY);
    }

    private Dictionary(Name alias, Table<DictionaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dictionary(Name alias, Table<DictionaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dictionary(Table<O> child, ForeignKey<O, DictionaryRecord> key) {
        super(child, key, DICTIONARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Metadata.METADATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICTIONARY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictionaryRecord> getPrimaryKey() {
        return Keys.KEY_DICTIONARY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictionaryRecord>> getKeys() {
        return Arrays.<UniqueKey<DictionaryRecord>>asList(Keys.KEY_DICTIONARY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dictionary as(String alias) {
        return new Dictionary(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dictionary as(Name alias) {
        return new Dictionary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary rename(String name) {
        return new Dictionary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary rename(Name name) {
        return new Dictionary(name, null);
    }
}
